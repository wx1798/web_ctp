# encoding: UTF-8from log import loggerfrom settings_mongo import *from settings_ctp import *from pymongo import UpdateOneimport datetimeconn[BASE_DB][INSTRUMENT_DB].create_index([(InstrumentID,asc),(ProductID,asc),(AvgVolume,asc)],background=True)def z_sort(_max,_group):    out = []    sub_list = []    p = 0    for i in range(_max):        sub_list.append(i)        p += 1        if p == _group:            if len(out)%2 == 0:                out.append(sub_list)            else:                out.append(sub_list[::-1])            sub_list = []            p = 0    if len(out) % 2 == 0:        out.append(sub_list)    else:        out.append(sub_list[::-1])    return outdef z_group(_list):    out = {}    for pos in _list[0]:        out[pos] = []    for one in _list:        for pos in range(len(one)):            out[pos].append(one[pos])    return outdef Get_Master_Instrument():    _all = list(conn[BASE_DB][INSTRUMENT_DB].find({},sort=[(AvgVolume,desc)]))    _product_master = {}    for inst in _all:        _product = inst[ProductID]        if _product not in _product_master:            _product_master[_product] = {}        compare_day = datetime.datetime.now()        compare_date = compare_day.strftime('%Y%m%d')        if inst.get(IsMaster,0) == Master_Level and inst[OverDate]>compare_date:            _product_master[_product][inst[InstrumentID]] = (inst[ExpireDate],inst.get(AvgVolume,0))            _max = conn[BASE_DB][INSTRUMENT_DB].find_one({ProductID:_product,ExpireDate:{'$gt':inst[ExpireDate]},AvgVolume:{'$gt':inst.get(AvgVolume,0)}},sort=[(AvgVolume,desc)]) or {}            if _max:                conn[BASE_DB][INSTRUMENT_DB].update_one({InstrumentID:inst[InstrumentID]},{'$set':{IsMaster:0}})                logger.error(u'%s 主力合约换月 %s(%d) => %s(%d)'%(_product,inst[InstrumentID],inst.get(AvgVolume,0),_max[InstrumentID],_max.get(AvgVolume,0)))                _product_master[_product][_max[InstrumentID]] = (_max[ExpireDate],_max.get(AvgVolume,0))    for _product,_master in _product_master.items():        if not _master:            _max = conn[BASE_DB][INSTRUMENT_DB].find_one({ProductID:_product},sort=[(AvgVolume,desc),(ExpireDate,asc)])            conn[BASE_DB][INSTRUMENT_DB].update_one({InstrumentID: _max[InstrumentID]}, {'$set': {IsMaster: Master_Level}})            logger.error(u'%s 主力合约初始化 %s(%d)' % (_product,_max[InstrumentID], _max.get(AvgVolume, 0)))            _product_master[_product][_max[InstrumentID]] = (_max[ExpireDate], _max.get(AvgVolume, 0))    _day = datetime.datetime.now().strftime('%Y%m%d')    if _all[0].get('Sort_Date','') != _day:        n = 0        Jobs = []        for one in _all:            job = UpdateOne({InstrumentID:one[InstrumentID]},{'$set':{'Sort_Date':_day,'Sort_Pos':n}})            Jobs.append(job)            n += 1        result = conn[BASE_DB][INSTRUMENT_DB].bulk_write(Jobs)#        print('Save_Instrument_Info:',result.bulk_api_result)def Save_Instrument_CommissionRate(_list):    _inst_dict = {}    _product_dict = {}    _all = list(conn[BASE_DB][INSTRUMENT_DB].find())    for one in _all:        _inst_dict[one[InstrumentID]] = 1        _product_dict[one[ProductID]] = 1    _next = []    for one in _list:        if one[InstrumentID] in _product_dict:            conn[BASE_DB][INSTRUMENT_DB].update_many({ProductID:one[InstrumentID]},{'$set':one})        else:            _next.append(one)    for one in _next:        if one[InstrumentID] in _inst_dict:            conn[BASE_DB][INSTRUMENT_DB].update_one({InstrumentID:one[InstrumentID]},{'$set':one})        else:            logger.error(u'<font color="red">未发现对应合约 %s</font>'%str(one))def Get_Over_Date(info, shift_days = 30):    if info[ExchangeID] == 'CFFEX':        shift_days = 1    _expire_date = info[ExpireDate]    _day = datetime.datetime.strptime(_expire_date, '%Y%m%d')    _over_day = _day - datetime.timedelta(days=shift_days)    _over_date = _over_day.strftime('%Y%m%d')    return _over_datedef Save_Instrument_Info(_dict):    Jobs = []    for inst,info in _dict.items():        info[OverDate] = Get_Over_Date(info)        _job = UpdateOne({InstrumentID:inst},{'$set':info},upsert=True)        Jobs.append(_job)    result = conn[BASE_DB][INSTRUMENT_DB].bulk_write(Jobs)#    print('Save_Instrument_Info:',result.bulk_api_result)